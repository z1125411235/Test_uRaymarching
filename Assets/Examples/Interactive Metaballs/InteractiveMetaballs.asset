%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 3acd6fe57257048db802c1c4c2b75248, type: 3}
  m_Name: InteractiveMetaballs
  m_EditorClassIdentifier: 
  shaderName: TransformProvider
  shaderReference: {fileID: 4800000, guid: d36b7ffba7b1e4d39b4e60e89ae1f03d, type: 3}
  shaderTemplate: uRaymarching/Forward/Standard
  variables:
  - key: Name
    value: TransformProvider
  - key: ObjectShape
    value: CUBE
  - key: RaymarchingShaderDirectory
    value: Assets/uRaymarching/Shaders/Include
  - key: RenderType
    value: Opaque
  - key: RenderQueue
    value: Geometry
  conditions:
  - key: ShadowCaster
    value: 1
  - key: FullScreen
    value: 0
  - key: WorldSpace
    value: 1
  - key: FollowObjectScale
    value: 0
  - key: CameraInsideObject
    value: 0
  - key: UseRaymarchingDepth
    value: 1
  - key: FallbackToDiffuse
    value: 1
  - key: Blend
    value: 0
  - key: UseCameraDepthTexture
    value: 0
  - key: DisableViewCulling
    value: 0
  - key: SphericalHarmonicsPerPixel
    value: 1
  - key: ForwardAdd
    value: 1
  - key: FallbackToStandardShader
    value: 0
  blocks:
  - key: Properties
    value: '[Header(Additional Parameters)]

      _Smooth("Smooth", float) = 1.0

      _CubeColor("Cube Color", Color) = (1.0, 1.0, 1.0, 1.0)

      _SphereColor("Sphere Color", Color) = (1.0, 1.0, 1.0, 1.0)

      _TorusColor("Torus Color", Color) = (1.0, 1.0, 1.0, 1.0)

      _PlaneColor("Plane Color", Color) = (1.0, 1.0, 1.0, 1.0)'
    folded: 1
  - key: DistanceFunction
    value: "// These inverse transform matrices are provided\n// from TransformProvider
      script \nfloat4x4 _Cube;\nfloat4x4 _Sphere;\nfloat4x4 _Torus;\nfloat4x4 _Plane;
      \n\nfloat _Smooth;\n\ninline float DistanceFunction(float3 wpos)\n{\n    float4
      cPos = mul(_Cube, float4(wpos, 1.0));\n    float4 sPos = mul(_Sphere, float4(wpos,
      1.0));\n    float4 tPos = mul(_Torus, float4(wpos, 1.0));\n    float4 pPos =
      mul(_Plane, float4(wpos, 1.0));\n    float s = Sphere(sPos, 0.5);\n    float
      c = Box(cPos, 0.5);\n    float t = Torus(tPos, float2(0.5, 0.2));\n    float
      p = Plane(pPos, float3(0, 1, 0));\n    float sc = SmoothMin(s, c, _Smooth);\n
      \   float tp = SmoothMin(t, p, _Smooth);\n    return SmoothMin(sc, tp, _Smooth);\n}"
    folded: 1
  - key: PostEffect
    value: "float4 _CubeColor;\nfloat4 _SphereColor;\nfloat4 _TorusColor;\nfloat4
      _PlaneColor;\n\ninline void PostEffect(RaymarchInfo ray, inout PostEffectOutput
      o)\n{\n    float3 wpos = ray.endPos;\n    float4 cPos = mul(_Cube, float4(wpos,
      1.0));\n    float4 sPos = mul(_Sphere, float4(wpos, 1.0));\n    float4 tPos
      = mul(_Torus, float4(wpos, 1.0));\n    float4 pPos = mul(_Plane, float4(wpos,
      1.0));\n    float s = Sphere(sPos, 0.5);\n    float c = Box(cPos, 0.5);\n    float
      t = Torus(tPos, float2(0.5, 0.2));\n    float p = Plane(pPos, float3(0, 1, 0));\n
      \   float4 a = normalize(float4(1.0 / s, 1.0 / c, 1.0 / t, 1.0 / p));\n    o.Albedo
      =\n        a.x * _SphereColor +\n        a.y * _CubeColor +\n        a.z * _TorusColor
      +\n        a.w * _PlaneColor;\n}"
    folded: 1
  constants: {fileID: 11400000, guid: 4df15a420345e4af98645ddd9620aa5b, type: 2}
  basicFolded: 1
  conditionsFolded: 1
  variablesFolded: 1
  materialsFolded: 0
  constantsFolded: 1
